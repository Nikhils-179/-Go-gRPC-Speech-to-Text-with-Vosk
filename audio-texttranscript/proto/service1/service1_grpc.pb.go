// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.11
// source: proto/service1.proto

package service1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AudioProcessingService_ProcessAudio_FullMethodName = "/service1.AudioProcessingService/ProcessAudio"
)

// AudioProcessingServiceClient is the client API for AudioProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service1 forwards audio to Service2.
type AudioProcessingServiceClient interface {
	ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, Transcription], error)
}

type audioProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAudioProcessingServiceClient(cc grpc.ClientConnInterface) AudioProcessingServiceClient {
	return &audioProcessingServiceClient{cc}
}

func (c *audioProcessingServiceClient) ProcessAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, Transcription], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AudioProcessingService_ServiceDesc.Streams[0], AudioProcessingService_ProcessAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, Transcription]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioProcessingService_ProcessAudioClient = grpc.BidiStreamingClient[AudioChunk, Transcription]

// AudioProcessingServiceServer is the server API for AudioProcessingService service.
// All implementations must embed UnimplementedAudioProcessingServiceServer
// for forward compatibility.
//
// Service1 forwards audio to Service2.
type AudioProcessingServiceServer interface {
	ProcessAudio(grpc.BidiStreamingServer[AudioChunk, Transcription]) error
	mustEmbedUnimplementedAudioProcessingServiceServer()
}

// UnimplementedAudioProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAudioProcessingServiceServer struct{}

func (UnimplementedAudioProcessingServiceServer) ProcessAudio(grpc.BidiStreamingServer[AudioChunk, Transcription]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessAudio not implemented")
}
func (UnimplementedAudioProcessingServiceServer) mustEmbedUnimplementedAudioProcessingServiceServer() {
}
func (UnimplementedAudioProcessingServiceServer) testEmbeddedByValue() {}

// UnsafeAudioProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudioProcessingServiceServer will
// result in compilation errors.
type UnsafeAudioProcessingServiceServer interface {
	mustEmbedUnimplementedAudioProcessingServiceServer()
}

func RegisterAudioProcessingServiceServer(s grpc.ServiceRegistrar, srv AudioProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAudioProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AudioProcessingService_ServiceDesc, srv)
}

func _AudioProcessingService_ProcessAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioProcessingServiceServer).ProcessAudio(&grpc.GenericServerStream[AudioChunk, Transcription]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AudioProcessingService_ProcessAudioServer = grpc.BidiStreamingServer[AudioChunk, Transcription]

// AudioProcessingService_ServiceDesc is the grpc.ServiceDesc for AudioProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AudioProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service1.AudioProcessingService",
	HandlerType: (*AudioProcessingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessAudio",
			Handler:       _AudioProcessingService_ProcessAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service1.proto",
}
